//    Copyright CodeMerx 2020
//    This file is part of CodemerxDecompile.

//    CodemerxDecompile is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.

//    CodemerxDecompile is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//    GNU Affero General Public License for more details.

//    You should have received a copy of the GNU Affero General Public License
//    along with CodemerxDecompile.  If not, see<https://www.gnu.org/licenses/>.

syntax = "proto3";

option csharp_namespace = "CodemerxDecompile.Service";

service RpcDecompiler {
  rpc GetAssemblyRelatedFilePaths (GetAssemblyRelatedFilePathsRequest) returns (GetAssemblyRelatedFilePathsResponse);
  rpc GetAllTypeFilePaths (GetAllTypeFilePathsRequest) returns (GetAllTypeFilePathsResponse);
  rpc DecompileType (DecompileTypeRequest) returns (DecompileTypeResponse);
  rpc GetMemberReferenceMetadata (GetMemberReferenceMetadataRequest) returns (GetMemberReferenceMetadataResponse);
  rpc GetMemberDefinitionPosition (GetMemberDefinitionPositionRequest) returns (Selection);
  rpc AddResolvedAssembly (AddResolvedAssemblyRequest) returns (Empty);
}

message Empty { }

message GetAssemblyRelatedFilePathsRequest {
  string assemblyPath = 1;
}

message GetAssemblyRelatedFilePathsResponse {
  string decompiledAssemblyDirectory = 1;
  string decompiledAssemblyPath = 2;
}

message GetAllTypeFilePathsRequest {
  string assemblyPath = 1;
}

message GetAllTypeFilePathsResponse {
  repeated string typeFilePaths = 1;
}

message GetMemberReferenceMetadataRequest {
	string absoluteFilePath = 1;
	int32 lineNumber = 2;
	int32 column = 3;
}

message GetMemberReferenceMetadataResponse {
  string definitionFilePath = 1;
  string memberFullName = 2;
  bool isCrossAssemblyReference = 3;
  string referencedAssemblyFullName = 4;
  string referencedAssemblyFilePath = 5;
}

message GetMemberDefinitionPositionRequest {
  string absoluteFilePath = 1;
  string memberFullName = 2;
}

message Selection {
	int32 startLineNumber = 1;
	int32 startColumn = 2;
	int32 endLineNumber = 3;
	int32 endColumn = 4;
}

message TypeFilePath {
  string typeFullName = 1;
  string absoluteFilePath = 2;
}

message DecompileTypeRequest {
  string filePath = 1;
}

message DecompileTypeResponse {
  string sourceCode = 1;
}

message AddResolvedAssemblyRequest {
  string filePath = 1;
}
